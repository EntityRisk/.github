name: Full CI workflow for final checks

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      python-version:
        required: true
        type: string
      package:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true
      ACCESS_TOKEN:
        required: true

jobs:

  build:
    runs-on: ${{ inputs.os }}

    name: Full Test Suite ${{ inputs.os }} (${{ inputs.python-version }})

    steps:
    - uses: actions/checkout@v3
    - name: Configure secret access
      run: |
        git config --global url."https://${{ secrets.ACCESS_TOKEN }}@github".insteadOf https://github
    - name: Set up python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Install package
      run: poetry install --no-interaction
    - name: Analysing the code with pylint
      run: |
        pylint --rcfile=.pylintrc ${{ inputs.package }} tests
    - name: Sphinx Build
      run: |
        cd docs
        make clean
        make html
    - name: Test Suite with Coverage
      run: |
        python -m pytest --cache-clear --cov=${{ inputs.package }} --cov-report=xml tests
    - name: "Upload coverage to Codecov"
      uses: codecov/codecov-action@v2
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
